// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum UserRole {
    TRADER
    USER
    SUPPORT
}

enum TransactionTypes {
    ORDER
    WITHDRAW
    DEPOSIT
}

enum SideType {
    BUY
    SELL
}

model Transaction {
    id        String           @id @default(auto()) @map("_id") @db.ObjectId
    type      TransactionTypes
    createdAt DateTime         @default(now())
    amount    Float
    user      User             @relation(fields: [userId], references: [id])
    userId    String           @db.ObjectId

    // for Orders
    side   SideType?
    symbol String?
    price  Float?
}

type CoinHolding {
    amount Float
    symbol String
}

model Portfolio {
    id     String        @id @default(auto()) @map("_id") @db.ObjectId
    fiat   Float
    userId String        @db.ObjectId
    user   User          @relation(fields: [userId], references: [id])
    coins  CoinHolding[]

    @@unique([userId])
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                      String                 @id @default(auto()) @map("_id") @db.ObjectId
    name                    String?
    email                   String?                @unique
    hashedPassword          String?
    role                    UserRole               @default(USER)
    isValidated             Boolean                @default(false)
    expiryDate              DateTime?
    has2FA                  Boolean                @default(false)
    twoFactorConfimation    TwoFactorConfirmation?
    image                   String?
    accounts                Account[]
    twoFactorConfirmationId String?                @db.ObjectId
    tickets                 Ticket[]
    transactions            Transaction[]
    portfolio               Portfolio?
}

model TwoFactorToken {
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Ticket {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    subject     String
    description String
    resolved    Boolean  @default(false)
    createDate  DateTime

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
